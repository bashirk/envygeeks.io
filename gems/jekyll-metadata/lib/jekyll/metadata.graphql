fragment         UserFields on User         { url, name, avatarUrl, login, websiteUrl }
fragment     PageInfoFields on PageInfo     { startCursor, hasPreviousPage, hasNextPage, endCursor }
fragment OrganizationFields on Organization { url, org: name , avatarUrl, login }
fragment    RateLimitFields on RateLimit    { resetAt, remaining, limit, cost }
fragment   RepositoryFields on Repository   {
  pushedAt
  nameWithOwner
  hasIssuesEnabled
  hasWikiEnabled
  name
  url

  owner {
    ... on User { ...UserFields }
    ... on Organization {
      ...OrganizationFields
    }
  }

  primaryLanguage { name }
  pullRequests(states: OPEN) { totalCount }
  issues(states: OPEN) { totalCount }
  stargazers { totalCount }
  forks { totalCount }
}

fragment CommitFields on Commit {
  treeUrl
  messageHeadline
  committedDate
  commitUrl
  oid


  author {
    user {
      ...UserFields
    }
  }
}

query Limit {
  rateLimit {
    ...RateLimitFields
  }
}

query Repos($count: Int!, $user: String!,
$after: String, $order: RepositoryOrderField = STARGAZERS,
$privacy: RepositoryPrivacy = PUBLIC) {
  rateLimit {
    ...RateLimitFields
  }

  user(login: $user) {
    repositories(privacy: $privacy, first: $count, isFork: false,
    affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER], orderBy: {
    field: $order, direction: DESC }, after: $after) {
      pageInfo {
        ...PageInfoFields
      }

      edges {
        node {
          ...RepositoryFields
        }
      }
    }
  }
}

query Repo($repo: String!, $user: String!, $count: Int!) {
  rateLimit {
    ...RateLimitFields
  }

  repository(owner: $user, name: $repo) {
    ...RepositoryFields

    ref(qualifiedName: "refs/heads/master") {
      target {
      	... on Commit {
          history(first: $count) {
            edges {
              node {
                ...CommitFields
              }
            }
          }
        }
      }
    }
  }
}

query Stat($repo: String!, $user: String!, $after: String,
$path: String!, $count: Int!) {
  rateLimit {
    ...RateLimitFields
  }

  repository(owner: $user, name: $repo) {
    ref(qualifiedName: "refs/heads/master") {
      target {
      	... on Commit {
          history(first: $count, path: $path, after: $after) {
            pageInfo {
              ...PageInfoFields
            }

            edges {
              node {
                ...CommitFields
              }
            }
          }
        }
      }
    }
  }
}
