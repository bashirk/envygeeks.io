# --
# When you plan to develop the site.
# CMDS: docker-compose -f compose.yml up/run command.
# NOTE: This is inherited by most of the stuff around here.
#   Except for production.
# --
dev: &def
  image: jekyll/jekyll
  environment: &env
    BUNDLE_CACHE: "true"
    JEKYLL_ENV: development
    JEKYLL_DEBUG: "false"
    CI: $CI
  volumes:
    - $PWD:/srv/jekyll
  ports:
    - 4000:4000
    - 35729:35729
    - 3000:4000
  command: "\
    bash -lc '\
      jekyll serve --watch --livereload \\\
        --drafts --trace
    '\
  "
# --
# Production build.
# This is used in our deploy scripts.
# --
build:
  <<: *def
  environment:
    <<: *env
    JEKYLL_ENV: production
  command: "\
    bash -lc '\
      jekyll build --trace; \
      node_modules/.bin/postcss --no-map --config=script/file/postcss.js \\\
      site/assets/*.css --dir=site/assets; \
      node_modules/.bin/html-minifier --html5 \\\
        --remove-comments \\\
        --collapse-whitespace  \\\
        --remove-tag-whitespace \\\
        --collapse-boolean-attributes \\\
        --collapse-inline-tag-whitespace \\\
        --remove-style-link-type-attributes \\\
        --remove-script-type-attributes \\\
        --remove-redundant-attributes \\\
        --remove-attribute-quotes \\\
        --quote-character=\\\" \\\
        --output-dir=site/ \\\
        --input-dir=site/ \\\
        --file-ext=html \
    '\
  "
# --
# So you can clean up the source.
# --
clean:
  <<: *def
  environment:
    CONNECTED: "false"
    <<: *env
  command: "\
    bash -lc '\
      rm -rf source/.asset-cache;\
      jekyll clean > /dev/null 2>&1;\
      depends clean;\
    '\
  "
# --
# Clobber and cleanup everything.
# --
clobber:
  <<: *def
  environment:
    CONNECTED: "false"
    <<: *env
  command: "\
    bash -lc '\
      rm -rf .bundle
      rm -rf node_modules/
      rm -rf source/.asset-cache;\
      jekyll clean > /dev/null 2>&1;
      rm -rf Gemfile.lock
      rm -rf vendor/
      depends clean
    '\
  "
# --
# Install the Gems.
# --
install:
  <<: *def
  command: "\
    bash -lc '\
      npm install;
      depends install;\
      depends clean;\
    '\
  "
# --
# Update the Gems.
# --
update:
  <<: *def
  command: "\
    bash -lc '\
      depends update;\
      depends clean;\
    '\
  "
# --
# Test the site.
# --
test:
  <<: *def
  command: "\
    bash -lc '\
      bundle exec htmlproofer --assume-extension \\\
        --enforce-https --internal-domains=${SITE_DOMAIN} \
        --allow-hash-href site;\
    '\
  "
# --
# Check outdated stuff.
# --
outdated:
  <<: *def
  command: "\
    bash -lc '\
      bundle outdated
    '\
  "
