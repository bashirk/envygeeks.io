# --
# When you plan to develop the site.
# CMDS: docker-compose -f compose.yml up/run command.
# NOTE: This is inherited by most of the stuff around here.
#   Except for production.
# --
dev: &def
  image: jekyll/jekyll
  environment: &env
    BUNDLE_CACHE: "true"
    JEKYLL_ENV: development
    JEKYLL_DEBUG: "false"
    CI: $CI
  volumes:
    - $PWD:/srv/jekyll
  ports:
    - 4000:4000
    - 3000:4000
  command: "\
    bash -lc '\
      rm -rf _site;\
      rm -rf .asset-cache;\
      jekyll serve --watch \\\
        --drafts --trace
    '\
  "
# --
# Production build.
# This is used in our deploy scripts.
# --
build:
  <<: *def
  environment:
    <<: *env
    JEKYLL_ENV: production
  command: "\
    bash -lc '\
      rm -rf _site; \
      rm -rf .asset-cache; \
      jekyll build \\\
        --trace\
    '\
  "
# --
# So you can clean up the source.
# --
clean:
  <<: *def
  environment:
    CONNECTED: "false"
    <<: *env
  command: "\
    bash -lc '\
      jekyll clean;\
      rm -rf .asset-cache;\
      depends clean;\
    '\
  "
# --
# Install the Gems.
# --
install:
  <<: *def
  command: "\
    bash -lc '\
      depends install;\
      depends clean;\
    '\
  "
# --
# Update the Gems.
# --
update:
  <<: *def
  command: "\
    bash -lc '\
      depends update;\
      depends clean;\
    '\
  "
# --
# Test the site.
# --
test:
  <<: *def
  command: "\
    bash -lc '\
      bundle exec htmlproofer site;\
    '\
  "
